C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CALCULATOR_USING_EMBEDDED_C
OBJECT MODULE PLACED IN .\Objects\Calculator using Embedded C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Calculator using Embedded C.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEN
                    -D PRINT(.\Listings\Calculator using Embedded C.lst) TABS(2) OBJECT(.\Objects\Calculator using Embedded C.obj)

line level    source

   1          #include <reg51.h>
   2          #define max 9
   3          #define LCD_PORT P3
   4          sbit rs=P0^6;
   5          sbit e=P0^7;
   6          #define keyport P1
   7          unsigned char colloc, rowloc;
   8          unsigned char keypad[4][4];
   9          void lcd_command(unsigned char x);
  10          void lcd_init();
  11          void lcd_data(unsigned char x);
  12          void lcd_delete();
  13          void delay(unsigned char x);
  14          unsigned char key_detect();
  15          char scr;
  16          
  17          //*********************************************************************************
  18          
  19          typedef struct Stack
  20          {
  21          char top;
  22          signed int items[max];
  23          } stack;
  24          
  25          void reset(stack *a)
  26          {
  27   1        a->top=-1;
  28   1      }
  29          void push(int pushed,stack *a)
  30          {
  31   1       a->items[++a->top]=pushed;
  32   1      }
  33          signed int pop(stack *a)
  34          {
  35   1        return a->items[a->top--];
  36   1      }
  37          
  38          signed int peek(stack a)
  39          {
  40   1        return a.items[a.top];
  41   1      }
  42          signed int underpeek(stack a)
  43          {
  44   1        return a.items[a.top-1];
  45   1      }
  46          signed int returnintresult(stack a)
  47          {
  48   1        return a.items[0];
  49   1      }
  50          
  51          signed int returnfloatresult(stack a)
  52          {
  53   1        return a.items[2];
  54   1      }
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 2   

  55          //*****************************************************************************************************
  56          char Priority(char val)
  57          {
  58   1          if(val=='+'||val=='-')
  59   1              return 1;
  60   1          else if(val=='*'||val=='/')
  61   1              return 2;
  62   1          else
  63   1              return 0;
  64   1      }
  65          
  66          /*******************************************************************************************************
  67          ********************************************************************************************************/
  68          void main()
  69          {
  70   1        unsigned char x;
  71   1        signed int digits [19];
  72   1        char digit_counter;
  73   1        char numalpha ;
  74   1        stack alpha;
  75   1        char evaluation;
  76   1        long firstoperator;
  77   1        long secoundoperator;
  78   1        signed int firstfloat;
  79   1        signed int secoundfloat;
  80   1        signed int resultfloat;
  81   1        signed int resultint;
  82   1        signed int ans_int;
  83   1        signed int ans_float;
  84   1      
  85   1        start:
  86   1        scr=0;
  87   1        digit_counter=0;
  88   1        x='0';
  89   1        evaluation=0;
  90   1        numalpha = 3;
  91   1        reset(&alpha);
  92   1        P3=0xff;
  93   1        lcd_init();
  94   1        x=key_detect();
  95   1        ans_label:
  96   1        while (x!='=')
  97   1        { 
  98   2          while(x=='.')
  99   2        {
 100   3        lcd_data(x);
 101   3        digits[digit_counter++]=x;
 102   3        numalpha=1;
 103   3        x=key_detect();
 104   3        }
 105   2        lcd_data(x);
 106   2        if (x>='0'&&x<='9')
 107   2        { x=x-0x30;
 108   3          if (numalpha==0)
 109   3          digits[digit_counter-1]=digits[digit_counter-1]*10+x;
 110   3          else
 111   3          digits[digit_counter++]=x;
 112   3          numalpha=0;
 113   3        }
 114   2        else
 115   2        {
 116   3        if(numalpha!=0)//if operation pressed at the bggenning we push 0
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 3   

 117   3        digits[digit_counter++]=0;
 118   3      
 119   3        if(Priority(x)>Priority(peek(alpha)))
 120   3        push(x,&alpha);
 121   3        else
 122   3        {
 123   4        digits[digit_counter++]=pop(&alpha);
 124   4        push(x,&alpha);
 125   4        }
 126   3        numalpha=1;
 127   3        }
 128   2        x=key_detect();
 129   2        }
 130   1        
 131   1        while(alpha.top!=-1)
 132   1        {
 133   2        digits[digit_counter++]=pop(&alpha);
 134   2        }
 135   1        digits[digit_counter]='$';  
 136   1        lcd_data(x);
 137   1        reset(&alpha);
 138   1      
 139   1        
 140   1        
 141   1        while(digits[evaluation]!='$')
 142   1        {
 143   2          if (digits[evaluation]=='+'||digits[evaluation]=='-'||digits[evaluation]=='*'||digits[evaluation]=='/')
 144   2          {
 145   3          if (underpeek(alpha)=='.')
 146   3          {
 147   4          secoundfloat=pop(&alpha);
 148   4          if (secoundfloat/10==0)
 149   4          secoundfloat*=10;
 150   4          pop(&alpha);
 151   4          secoundoperator=pop(&alpha);
 152   4          }
 153   3          else
 154   3          {
 155   4          secoundoperator=pop(&alpha);
 156   4          secoundfloat=0;
 157   4          }
 158   3          if (underpeek(alpha)=='.')
 159   3          { 
 160   4            firstfloat=pop(&alpha);
 161   4            if (firstfloat/10==0)
 162   4            firstfloat*=10;
 163   4            pop(&alpha);
 164   4            firstoperator=pop(&alpha);
 165   4          }
 166   3          else
 167   3          {
 168   4          firstoperator=pop(&alpha);
 169   4          firstfloat=0;
 170   4          }
 171   3      
 172   3          
 173   3          switch (digits[evaluation])
 174   3          {
 175   4            case '+':
 176   4            resultfloat=firstfloat+secoundfloat;
 177   4            resultint=firstoperator+secoundoperator+(resultfloat/100);
 178   4            resultfloat=resultfloat-((resultfloat/100)*100);
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 4   

 179   4            push(resultint,&alpha);
 180   4            push('.',&alpha);
 181   4            push(resultfloat,&alpha); 
 182   4            break;
 183   4            
 184   4            case '-':
 185   4            if(firstfloat<secoundfloat)
 186   4            {
 187   5              firstfloat+=100;
 188   5              firstoperator--;
 189   5            }
 190   4            resultfloat=firstfloat-secoundfloat;
 191   4            resultint=firstoperator-secoundoperator;
 192   4            push(resultint,&alpha);
 193   4            push('.',&alpha);
 194   4            push(resultfloat,&alpha);     
 195   4            break;
 196   4            
 197   4            case '*':
 198   4            firstoperator=firstoperator*100+firstfloat;
 199   4            secoundoperator=secoundoperator*100+secoundfloat;
 200   4            resultfloat=firstoperator*secoundoperator%10000;
 201   4            resultint=firstoperator*secoundoperator/10000;
 202   4            push(resultint,&alpha);
 203   4            push('.',&alpha);
 204   4            push(resultfloat,&alpha); 
 205   4            break;
 206   4            case '/':
 207   4            {
 208   5            firstoperator=firstoperator*100+firstfloat;
 209   5            secoundoperator=secoundoperator*100+secoundfloat;
 210   5            resultfloat=((firstoperator%secoundoperator)*100)/secoundoperator;
 211   5            resultint=firstoperator/secoundoperator;
 212   5            push(resultint,&alpha);
 213   5            push('.',&alpha);
 214   5            push(resultfloat,&alpha); 
 215   5            }
 216   4            }}
 217   2        else  
 218   2        push(digits[evaluation],&alpha);
 219   2        evaluation++;
 220   2        }
 221   1      
 222   1      
 223   1        resultint=returnintresult(alpha);
 224   1        ans_int=resultint;
 225   1        resultfloat=returnfloatresult(alpha);
 226   1        ans_float=resultfloat;
 227   1        if(resultint<0)
 228   1        {
 229   2        lcd_data('-');
 230   2        resultint=0x10000-resultint;
 231   2        }
 232   1        
 233   1        reset(&alpha);
 234   1        while(resultint!=0) 
 235   1        {
 236   2        push(resultint%10,&alpha);
 237   2        resultint/=10;
 238   2        }
 239   1        if (alpha.top==-1)
 240   1            push(0,&alpha);
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 5   

 241   1        while(alpha.top!=-1) //to display integer nums
 242   1        {
 243   2        lcd_data(pop(&alpha)+0x30);
 244   2        }
 245   1      
 246   1        
 247   1        lcd_data('.');
 248   1        
 249   1        while(resultfloat!=0) 
 250   1        {
 251   2        push(resultfloat%10,&alpha);
 252   2        resultfloat=resultfloat/10;
 253   2        }
 254   1        if (alpha.top<1)
 255   1            push(0,&alpha);
 256   1      
 257   1        while(alpha.top!=-1) //to display integer nums
 258   1        {
 259   2        lcd_data(pop(&alpha)+0x30);
 260   2        }
 261   1        
 262   1      
 263   1        
 264   1        
 265   1        x=key_detect();
 266   1        if(x=='/'||x=='*'||x=='+'||x=='-')
 267   1        {
 268   2        reset(&alpha);
 269   2        lcd_init();
 270   2        lcd_data('A');
 271   2        lcd_data('N');
 272   2        lcd_data('S');
 273   2        digit_counter=0;
 274   2        digits[digit_counter++]=ans_int;
 275   2        digits[digit_counter++]='.';
 276   2        digits[digit_counter++]=ans_float;
 277   2        numalpha=0;
 278   2        scr=4;
 279   2        evaluation=0;
 280   2        
 281   2        goto ans_label;
 282   2      
 283   2        } 
 284   1        else
 285   1        goto start;
 286   1      
 287   1        
 288   1      }
 289          /*******************************************************************************************************
 290          *********************************************************************************************************/
 291          void delay(unsigned char itime)
 292          {
 293   1      unsigned char j;
 294   1      {
 295   2      for (j=0;j<itime;j++);
 296   2      }
 297   1      }
 298          
 299          //LCD INTERACING:
 300          void lcd_command(unsigned char x)
 301          {
 302   1      LCD_PORT=x;
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 6   

 303   1      rs=0;
 304   1      e=1;
 305   1      x=0;
 306   1      e=0;
 307   1      delay(255);
 308   1      
 309   1      }
 310          
 311          void lcd_init()
 312          {
 313   1      lcd_command(0x38); //8bits & 2lines
 314   1      lcd_command(0x0e); // display on cursor blinking
 315   1      lcd_command(0x01); // clear screen
 316   1      lcd_command(0x80); //force curcor to 1st line
 317   1      }
 318          
 319          void lcd_data(unsigned char x)
 320          {
 321   1      scr++;
 322   1      if (scr>15)
 323   1        lcd_command(0x18);
 324   1      LCD_PORT=x;
 325   1      rs=1;
 326   1      e=1;
 327   1      delay(255);
 328   1      e=0;
 329   1      
 330   1      }
 331          
 332          
 333          unsigned char keypad[4][4] = {{'.','7','4','1'},
 334                                        {'0','8','5','2'},
 335                                        {'=','9','6','3'},
 336                                        {'+','-','*','/'} };
 337          
 338          unsigned char key_detect()
 339          {
 340   1        keyport=0xF0;     /*set port direction as input-output*/
 341   1        do
 342   1        {
 343   2          keyport = 0xF0;       
 344   2          colloc = keyport;
 345   2          colloc&= 0xF0;  /* mask port for column read only */
 346   2        }while(colloc != 0xF0);   /* read status of column */
 347   1        
 348   1        do
 349   1        {
 350   2          do
 351   2          {
 352   3            delay(20);  /* 20ms key debounce time */
 353   3            colloc = (keyport & 0xF0);  /* read status of column */
 354   3          }while(colloc == 0xF0); /* check for any key press */
 355   2          
 356   2          delay(1);
 357   2          colloc = (keyport & 0xF0);
 358   2        }while(colloc == 0xF0);
 359   1            
 360   1        while(1)
 361   1        {
 362   2          /* now check for rows */
 363   2          keyport= 0xFE;                      /* check for pressed key in 1st row */
 364   2          colloc = (keyport & 0xF0);
C51 COMPILER V9.60.7.0   CALCULATOR_USING_EMBEDDED_C                                       04/20/2024 22:44:57 PAGE 7   

 365   2          if(colloc != 0xF0)
 366   2          {
 367   3            rowloc = 0;
 368   3            break;
 369   3          }
 370   2      
 371   2          keyport = 0xFD;                 /* check for pressed key in 2nd row */
 372   2          colloc = (keyport & 0xF0);
 373   2          if(colloc != 0xF0)
 374   2          {
 375   3            rowloc = 1;
 376   3            break;
 377   3          }
 378   2            
 379   2        keyport = 0xFB;     /* check for pressed key in 3rd row */
 380   2        colloc = (keyport & 0xF0);
 381   2        if(colloc != 0xF0)
 382   2        {
 383   3          rowloc = 2;
 384   3          break;
 385   3        }
 386   2      
 387   2        keyport = 0xF7;     /* check for pressed key in 4th row */
 388   2        colloc = (keyport & 0xF0);
 389   2        if(colloc != 0xF0)
 390   2        {
 391   3          rowloc = 3;
 392   3          break;
 393   3        } 
 394   2      }
 395   1        
 396   1        if(colloc == 0xE0)
 397   1        {
 398   2          return(keypad[rowloc][0]);
 399   2        }   
 400   1        else if(colloc == 0xD0)
 401   1        {
 402   2          return(keypad[rowloc][1]);
 403   2        } 
 404   1        else if(colloc == 0xB0)
 405   1        {
 406   2          return(keypad[rowloc][2]);
 407   2        } 
 408   1        else
 409   1        {
 410   2          return(keypad[rowloc][3]);
 411   2        } 
 412   1      }
 413          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1949    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19     163
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
