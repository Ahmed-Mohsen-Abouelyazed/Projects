C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HOME_AUTOMATION
OBJECT MODULE PLACED IN .\Objects\Home_Automation.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Home_Automation.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\Home_Automation.lst) TABS(2) OBJECT(.\Objects\Home_Automation.obj)

line level    source

   1          #include<reg51.h>
   2          
   3          #define LCD P0
   4          sbit rs=P2^6;
   5          sbit en=P2^7;
   6          void lcdcmd (unsigned char x);
   7          void lcdinit(void);
   8          void datawrt (unsigned char y);
   9          void lcd_delete(void);
  10          void lcdstring(unsigned char *ptr);
  11          
  12          #define keyport P1
  13          unsigned char colloc, rowloc;
  14          unsigned char keypad[4][4];
  15          unsigned char keypad_read(void);
  16          
  17          sbit Fan = P2^0;
  18          sbit TV = P2^1;
  19          
  20          sbit buzzer = P2^4;
  21          sbit Gas_sensor = P3^2;
  22          
  23          sbit RxD = P3^0;
  24          sbit TxD = P3^1;
  25          void Serialbegin(void);
  26          void Serialwrite(char byte);
  27          void Serialprintln(char *p);
  28          
  29          void delay(unsigned int x);
  30          
  31          char pass[4] = "4201";
  32          void accept(void);
  33          void wrong(void);
  34          unsigned char counter = 0;
  35          
  36          void main(void)
  37          {
  38   1          unsigned char i = 0,str,passed = 1,Charin = 0;
  39   1          unsigned char input[5] = {0}; // Initialize input array
  40   1        
  41   1          lcdinit();
  42   1          keyport=0xF0;     /*set port direction as input-output*/
  43   1          buzzer = 0;
  44   1          Gas_sensor = 1;
  45   1          
  46   1          lcdstring(" hello world! ");
  47   1          delay(2000);
  48   1          lcdcmd(1);
  49   1          lcdstring("HOME AUTOMATION");
  50   1          lcdcmd(0xc0);
  51   1          lcdstring("    SYSTEM    ");
  52   1          delay(3000);
  53   1          lcdcmd(1);
  54   1          
C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 2   

  55   1          start_over:
  56   1          
  57   1          lcdstring("Enter Password:");
  58   1          lcdcmd(0xc0);
  59   1          while(i < 4)
  60   1          {
  61   2              input[i] = keypad_read();
  62   2              i++;
  63   2          }
  64   1          input[4] = '\0'; // Null-terminate the input string
  65   1          
  66   1          i = 0;
  67   1          while(i < 4)
  68   1          {
  69   2              if(input[i]!=pass[i])
  70   2              {
  71   3                  passed = 0;
  72   3              }
  73   2          }
  74   1      
  75   1          if(passed == 1)
  76   1          {
  77   2              lcdcmd(1);
  78   2              lcdstring("Welcome, Ahmed");
  79   2              lcdcmd(0xc0);
  80   2              lcdstring("Password Accept");
  81   2              delay(2000);
  82   2              lcdcmd(1);
  83   2          }
  84   1          else
  85   1          {
  86   2              buzzer = 0;
  87   2              lcdcmd(1);
  88   2              lcdstring("Wrong Passkey");
  89   2              lcdcmd(0xc0);
  90   2              lcdstring("Access Denied");
  91   2              delay(2000);
  92   2              lcdcmd(1);
  93   2              buzzer = 1; // Reset buzzer
  94   2              counter++;
  95   2              if(counter == 3)
  96   2              {
  97   3                  while(1);
  98   3              }
  99   2              else
 100   2              {
 101   3                  goto start_over;
 102   3              }
 103   2          }
 104   1            
 105   1          Serialbegin();
 106   1          Serialprintln("System Ready...");
 107   1          delay(50);
 108   1          
 109   1          IT0 = 1; // Set the external interrupt 0 to trigger on falling edge
 110   1          EX0 = 1; // Enable external interrupt 0
 111   1          EA = 1; // Enable global interrupts
 112   1          
 113   1          while(1)
 114   1          {   
 115   2            while(!RI);
 116   2            Charin=SBUF;
C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 3   

 117   2            str=Charin;
 118   2            RI=0;
 119   2            
 120   2            if(str=='1')
 121   2            {
 122   3              Fan=1;
 123   3              Serialprintln(" Fan ON ");
 124   3              delay(50);
 125   3            }
 126   2            
 127   2            else if(str=='2')
 128   2            {
 129   3              Fan=0;
 130   3              Serialprintln(" Fan OFF ");
 131   3              delay(50);
 132   3            }
 133   2      
 134   2             else if(str=='3')
 135   2            {
 136   3              TV=1;
 137   3              Serialprintln(" TV ON ");
 138   3              delay(50);
 139   3            }
 140   2      
 141   2             else if(str=='4')
 142   2            {
 143   3              TV=0;
 144   3              Serialprintln(" TV OFF ");
 145   3              delay(50);
 146   3            }
 147   2            
 148   2            str=0;
 149   2          }
 150   1      }
 151          
 152          void delay(unsigned int time)
 153            {
 154   1         unsigned int i,j;
 155   1         for(i=0;i<time;i++)
 156   1         for(j=0;j<1275;j++);
 157   1        }
 158          
 159          void Serialwrite(char byte)
 160            {
 161   1          SBUF=byte;
 162   1          while(!TI);
 163   1          TI=0;
 164   1        }
 165          
 166          void Serialprintln(char *p)
 167            {
 168   1          while(*p)
 169   1          {
 170   2            Serialwrite(*p);
 171   2            p++;
 172   2          }
 173   1          Serialwrite(0x0d);
 174   1        }
 175          
 176          
 177          void Serialbegin(void)
 178            {
C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 4   

 179   1           TMOD=0x20;
 180   1           SCON=0x50;
 181   1           TH1=0xfd;
 182   1           TR1=1;
 183   1        }
 184          
 185          void lcdcmd (unsigned char x)
 186          
 187            { 
 188   1           LCD=x;  //send the command to Port 0 on which 16*2 lcd is connected
 189   1           rs=0;  //make RS = 0 for command
 190   1           en=1;  //send a HIGH to LOW pulse on Enable(E) pin to start commandwrite operation 
 191   1           delay(1);
 192   1           en=0;
 193   1        }
 194          
 195          void lcddata (unsigned char y)
 196          
 197            { 
 198   1           LCD=y; //send the data to Port 0 on which 16*2 lcd is connected
 199   1           rs=1; //make RS = 1 for command
 200   1           en=1; //send a HIGH to LOW pulse on Enable(E) pin to start datawrite operation
 201   1           delay(1);
 202   1           en=0;
 203   1        }
 204            
 205          void lcdinit (void)
 206          {
 207   1        LCD = 0x00;
 208   1        lcdcmd(0x38); //8bits & 2lines
 209   1        lcdcmd(0x0e); // display on cursor blinking
 210   1        lcdcmd(0x01); // clear screen
 211   1        lcdcmd(0x80); //force curcor to 1st line
 212   1      }
 213            
 214          void lcdstring(unsigned char *ptr)
 215            {
 216   1          while(*ptr)
 217   1          {
 218   2            lcddata(*ptr);
 219   2            ptr++;
 220   2          }
 221   1        }
 222            
 223            unsigned char keypad[4][4] = {{'.','7','4','1'},
 224                                        {'0','8','5','2'},
 225                                        {'=','9','6','3'},
 226                                        {'+','-','*','/'} };
 227          
 228          unsigned char keypad_read(void)
 229          {
 230   1        do
 231   1        {
 232   2          keyport = 0xF0;       
 233   2          colloc = keyport;
 234   2          colloc&= 0xF0;  /* mask port for column read only */
 235   2        }while(colloc != 0xF0);   /* read status of column */
 236   1        
 237   1        do
 238   1        {
 239   2          do
 240   2          {
C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 5   

 241   3            delay(20);  /* 20ms key debounce time */
 242   3            colloc = (keyport & 0xF0);  /* read status of column */
 243   3          }while(colloc == 0xF0); /* check for any key press */
 244   2          
 245   2          delay(1);
 246   2          colloc = (keyport & 0xF0);
 247   2        }while(colloc == 0xF0);
 248   1            
 249   1        while(1)
 250   1        {
 251   2          /* now check for rows */
 252   2          keyport= 0xFE;                      /* check for pressed key in 1st row */
 253   2          colloc = (keyport & 0xF0);
 254   2          if(colloc != 0xF0)
 255   2          {
 256   3            rowloc = 0;
 257   3            break;
 258   3          }
 259   2      
 260   2          keyport = 0xFD;                 /* check for pressed key in 2nd row */
 261   2          colloc = (keyport & 0xF0);
 262   2          if(colloc != 0xF0)
 263   2          {
 264   3            rowloc = 1;
 265   3            break;
 266   3          }
 267   2            
 268   2        keyport = 0xFB;     /* check for pressed key in 3rd row */
 269   2        colloc = (keyport & 0xF0);
 270   2        if(colloc != 0xF0)
 271   2        {
 272   3          rowloc = 2;
 273   3          break;
 274   3        }
 275   2      
 276   2        keyport = 0xF7;     /* check for pressed key in 4th row */
 277   2        colloc = (keyport & 0xF0);
 278   2        if(colloc != 0xF0)
 279   2        {
 280   3          rowloc = 3;
 281   3          break;
 282   3        } 
 283   2      }
 284   1        
 285   1        if(colloc == 0xE0)
 286   1        {
 287   2          return(keypad[rowloc][0]);
 288   2        }   
 289   1        else if(colloc == 0xD0)
 290   1        {
 291   2          return(keypad[rowloc][1]);
 292   2        } 
 293   1        else if(colloc == 0xB0)
 294   1        {
 295   2          return(keypad[rowloc][2]);
 296   2        } 
 297   1        else
 298   1        {
 299   2          return(keypad[rowloc][3]);
 300   2        } 
 301   1      }
 302          
C51 COMPILER V9.60.7.0   HOME_AUTOMATION                                                   05/10/2024 15:19:58 PAGE 6   

 303          void smoke_detected(void)
 304          {
 305   1        lcdcmd(1);
 306   1        lcdstring("Fire alarm is ON");
 307   1        lcdcmd(0xc0);
 308   1        lcdstring("Evacuate NOW!");
 309   1        buzzer = 0;
 310   1        while(1);
 311   1      }
 312          
 313          void external_interrupt_handler(void) interrupt 0
 314          {
 315   1          // Code to execute when the external interrupt occurs
 316   1          if (Gas_sensor == 0)
 317   1          {
 318   2              // Turn on buzzer and display message on LCD
 319   2              buzzer = 1;
 320   2              lcdcmd(1);
 321   2              lcdstring("Gas Detected");
 322   2              lcdcmd(0xc0);
 323   2              lcdstring("System in Hold");
 324   2              while(1);
 325   2          }
 326   1          // ...// Clear the interrupt flag to enable further interrupts
 327   1          EA = 0; // Disable global interrupts
 328   1          EX0 = 0; // Clear the external interrupt flag 0
 329   1          EA = 1; // Enable global interrupts
 330   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    824    ----
   CONSTANT SIZE    =    237    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
