C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HOME_AUTOMATION_AI
OBJECT MODULE PLACED IN .\Objects\Home_Automation_AI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Home_Automation_AI.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\Home_Automation_AI.lst) TABS(2) OBJECT(.\Objects\Home_Automation_AI.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          // Define LCD port
   4          #define LCD P0
   5          
   6          // Define LCD control pins
   7          sbit rs = P2^6;
   8          sbit en = P2^7;
   9          
  10          // Function prototypes
  11          void lcdcmd(unsigned char x);
  12          void lcdinit(void);
  13          void datawrt(unsigned char y);
  14          void lcd_delete(void);
  15          void lcdstring(unsigned char *ptr);
  16          
  17          // Define keypad port
  18          #define keyport P1
  19          
  20          // Keypad variables
  21          unsigned char colloc, rowloc;
  22          unsigned char keypad[4][4];
  23          
  24          // Function to read keypad input
  25          unsigned char keypad_read(void);
  26          
  27          // Define fan, TV, buzzer, and gas sensor pins
  28          sbit Fan = P2^0;
  29          sbit TV = P2^1;
  30          sbit buzzer = P2^4;
  31          sbit Gas_sensor = P3^2;
  32          
  33          // Define serial communication pins
  34          sbit RxD = P3^0;
  35          sbit TxD = P3^1;
  36          
  37          // Serial communication functions
  38          void Serialbegin(void);
  39          void Serialwrite(char byte);
  40          void Serialprintln(char *p);
  41          
  42          // Delay function
  43          void delay(unsigned int x);
  44          
  45          // Password variables
  46          char pass[4] = "4201";
  47          unsigned char counter = 0;
  48          
  49          // Function to accept or reject password
  50          void accept(void);
  51          void wrong(void);
  52          
  53          void main(void)
  54          {
C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 2   

  55   1          // Initialize variables
  56   1          unsigned char i = 0, str, passed = 1, Charin = 0;
  57   1          unsigned char input[5] = {0}; // Initialize input array
  58   1      
  59   1          // Initialize LCD and keypad
  60   1          lcdinit();
  61   1          keyport = 0xF0; // Set port direction as input-output
  62   1          buzzer = 0;
  63   1          Gas_sensor = 1;
  64   1      
  65   1          // Display welcome message on LCD
  66   1          lcdstring(" hello world! ");
  67   1          delay(2000);
  68   1          lcdcmd(1);
  69   1          lcdstring("HOME AUTOMATION");
  70   1          lcdcmd(0xc0);
  71   1          lcdstring("    SYSTEM    ");
  72   1          delay(3000);
  73   1          lcdcmd(1);
  74   1      
  75   1      start_over:
  76   1      
  77   1          // Prompt user to enter password
  78   1          lcdstring("Enter Password:");
  79   1          lcdcmd(0xc0);
  80   1      
  81   1          // Read keypad input
  82   1          while (i < 4)
  83   1          {
  84   2              input[i] = keypad_read();
  85   2              i++;
  86   2          }
  87   1          input[4] = '\0'; // Null-terminate the input string
  88   1      
  89   1          // Verify password
  90   1          i = 0;
  91   1          while (i < 4)
  92   1          {
  93   2              if (input[i] != pass[i])
  94   2              {
  95   3                  passed = 0;
  96   3              }
  97   2              i++;
  98   2          }
  99   1      
 100   1          // Handle password verification result
 101   1          if (passed == 1)
 102   1          {
 103   2              lcdcmd(1);
 104   2              lcdstring("Welcome, Ahmed");
 105   2              lcdcmd(0xc0);
 106   2              lcdstring("Password Accept");
 107   2              delay(2000);
 108   2              lcdcmd(1);
 109   2          }
 110   1          else
 111   1          {
 112   2              buzzer = 0;
 113   2              lcdcmd(1);
 114   2              lcdstring("Wrong Passkey");
 115   2              lcdcmd(0xc0);
 116   2              lcdstring("Access Denied");
C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 3   

 117   2              delay(2000);
 118   2              lcdcmd(1);
 119   2              buzzer = 1; // Reset buzzer
 120   2              counter++;
 121   2              if (counter == 3)
 122   2              {
 123   3                  while (1);
 124   3              }
 125   2              else
 126   2              {
 127   3                  goto start_over;
 128   3              }
 129   2          }
 130   1      
 131   1          // Initialize serial communication
 132   1          Serialbegin();
 133   1          Serialprintln("System Ready...");
 134   1          delay(50);
 135   1      
 136   1          // Enable external interrupt 0
 137   1          IT0 = 1; // Set the external interrupt 0 to trigger on falling edge
 138   1          EX0 = 1; // Enable external interrupt 0
 139   1          EA = 1; // Enable global interrupts
 140   1      
 141   1          // Main loop
 142   1          while (1)
 143   1          {
 144   2              while (!RI);
 145   2              Charin = SBUF;
 146   2              str = Charin;
 147   2              RI = 0;
 148   2      
 149   2              // Handle serial input
 150   2              if (str == '1')
 151   2              {
 152   3                  Fan = 1;
 153   3                  Serialprintln(" Fan ON ");
 154   3                  delay(50);
 155   3              }
 156   2              else if (str == '2')
 157   2              {
 158   3                  Fan = 0;
 159   3                  Serialprintln(" Fan OFF ");
 160   3                  delay(50);
 161   3              }
 162   2              else if (str == '3')
 163   2              {
 164   3                  TV = 1;
 165   3                  Serialprintln(" TV ON ");
 166   3                  delay(50);
 167   3              }
 168   2              else if (str == '4')
 169   2              {
 170   3                  TV = 0;
 171   3                  Serialprintln(" TV OFF ");
 172   3                  delay(50);
 173   3              }
 174   2      
 175   2              str = 0;
 176   2          }
 177   1      }
 178          
C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 4   

 179          // Delay function
 180          void delay(unsigned int time)
 181          {
 182   1          unsigned int i, j;
 183   1          for (i = 0; i < time; i++)
 184   1              for (j = 0; j < 1275; j++);
 185   1      }
 186          
 187          // Serial write function
 188          void Serialwrite(char byte)
 189          {
 190   1         SBUF = byte;
 191   1          while (!TI);
 192   1          TI = 0;
 193   1      }
 194          
 195          // Serial print function
 196          void Serialprintln(char *p)
 197          {
 198   1          while (*p)
 199   1          {
 200   2              Serialwrite(*p);
 201   2              p++;
 202   2          }
 203   1          Serialwrite(0x0d);
 204   1      }
 205          
 206          // Serial initialization function
 207          void Serialbegin(void)
 208          {
 209   1          TMOD = 0x20;
 210   1          SCON = 0x50;
 211   1          TH1 = 0xfd;
 212   1          TR1 = 1;
 213   1      }
 214          
 215          // LCD command function
 216          void lcdcmd(unsigned char x)
 217          {
 218   1          LCD = x; // Send the command to Port 0 on which 16*2 LCD is connected
 219   1          rs = 0; // Make RS = 0 for command
 220   1          en = 1; // Send a HIGH to LOW pulse on Enable(E) pin to start command write operation
 221   1          delay(1);
 222   1          en = 0;
 223   1      }
 224          
 225          // LCD data function
 226          void lcddata(unsigned char y)
 227          {
 228   1          LCD = y; // Send the data to Port 0 on which 16*2 LCD is connected
 229   1          rs = 1; // Make RS = 1 for data
 230   1          en = 1; // Send a HIGH to LOW pulse on Enable(E) pin to start data write operation
 231   1          delay(1);
 232   1          en = 0;
 233   1      }
 234          
 235          // LCD initialization function
 236          void lcdinit(void)
 237          {
 238   1          LCD = 0x00;
 239   1          lcdcmd(0x38); // 8bits & 2lines
 240   1          lcdcmd(0x0e); // Display on cursor blinking
C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 5   

 241   1          lcdcmd(0x01); // Clear screen
 242   1          lcdcmd(0x80); // Force cursor to 1st line
 243   1      }
 244          
 245          // LCD string function
 246          void lcdstring(unsigned char *ptr)
 247          {
 248   1          while (*ptr)
 249   1          {
 250   2              lcddata(*ptr);
 251   2              ptr++;
 252   2          }
 253   1      }
 254          
 255          // Keypad read function
 256          unsigned char keypad_read(void)
 257          {
 258   1          do
 259   1          {
 260   2              keyport = 0xF0; // Check for any key press
 261   2              colloc = keyport;
 262   2              colloc &= 0xF0; // Mask port for column read only
 263   2          } while (colloc!= 0xF0);
 264   1      
 265   1          do
 266   1          {
 267   2              do
 268   2              {
 269   3                  delay(20); // 20ms key debounce time
 270   3                  colloc = (keyport & 0xF0); // Read status of column
 271   3              } while (colloc == 0xF0); // Check for any key press
 272   2      
 273   2              delay(1);
 274   2              colloc = (keyport & 0xF0);
 275   2          } while (colloc == 0xF0);
 276   1      
 277   1          while (1)
 278   1          {
 279   2              // Check for rows
 280   2              keyport = 0xFE; // Check for pressed key in 1st row
 281   2              colloc = (keyport & 0xF0);
 282   2              if (colloc!= 0xF0)
 283   2              {
 284   3                  rowloc = 0;
 285   3                  break;
 286   3              }
 287   2      
 288   2              keyport = 0xFD; // Check for pressed key in 2nd row
 289   2              colloc = (keyport & 0xF0);
 290   2              if (colloc!= 0xF0)
 291   2              {
 292   3                  rowloc = 1;
 293   3                  break;
 294   3              }
 295   2      
 296   2              keyport = 0xFB; // Check for pressed key in 3rd row
 297   2              colloc = (keyport & 0xF0);
 298   2              if (colloc!= 0xF0)
 299   2              {
 300   3                  rowloc = 2;
 301   3                  break;
 302   3              }
C51 COMPILER V9.60.7.0   HOME_AUTOMATION_AI                                                05/10/2024 15:20:05 PAGE 6   

 303   2      
 304   2              keyport = 0xF7; // Check for pressed key in 4th row
 305   2              colloc = (keyport & 0xF0);
 306   2              if (colloc!= 0xF0)
 307   2              {
 308   3                  rowloc = 3;
 309   3                  break;
 310   3              }
 311   2          }
 312   1      
 313   1          if (colloc == 0xE0)
 314   1          {
 315   2              return (keypad[rowloc][0]);
 316   2          }
 317   1          else if (colloc == 0xD0)
 318   1          {
 319   2              return (keypad[rowloc][1]);
 320   2          }
 321   1          else if (colloc == 0xB0)
 322   1          {
 323   2              return (keypad[rowloc][2]);
 324   2          }
 325   1          else
 326   1          {
 327   2              return (keypad[rowloc][3]);
 328   2          }
 329   1      }
 330          
 331          // External interrupt handler
 332          void external_interrupt_handler(void) interrupt 0
 333          {
 334   1          // Code to execute when the external interrupt occurs
 335   1          if (Gas_sensor == 0)
 336   1          {
 337   2              // Turn on buzzer and display message on LCD
 338   2              buzzer = 1;
 339   2              lcdcmd(1);
 340   2              lcdstring("Gas Detected");
 341   2              lcdcmd(0xc0);
 342   2              lcdstring("System in Hold");
 343   2              while (1);
 344   2          }
 345   1          // Clear the interrupt flag to enable further interrupts
 346   1          EA = 0; // Disable global interrupts
 347   1          EX0 = 0; // Clear the external interrupt flag 
 348   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    788    ----
   CONSTANT SIZE    =    206    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
